// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=repo_mock.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "project/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Companies mocks base method.
func (m *MockUserRepo) Companies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Companies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Companies indicates an expected call of Companies.
func (mr *MockUserRepoMockRecorder) Companies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Companies", reflect.TypeOf((*MockUserRepo)(nil).Companies), ctx)
}

// CompanyById mocks base method.
func (m *MockUserRepo) CompanyById(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyById", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyById indicates an expected call of CompanyById.
func (mr *MockUserRepoMockRecorder) CompanyById(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyById", reflect.TypeOf((*MockUserRepo)(nil).CompanyById), ctx, cid)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, userData models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, userData)
}

// CreateUserCompany mocks base method.
func (m *MockUserRepo) CreateUserCompany(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCompany", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserCompany indicates an expected call of CreateUserCompany.
func (mr *MockUserRepoMockRecorder) CreateUserCompany(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCompany", reflect.TypeOf((*MockUserRepo)(nil).CreateUserCompany), ctx, companyData)
}

// CreateUserJob mocks base method.
func (m *MockUserRepo) CreateUserJob(ctx context.Context, jobData models.Jobs) (models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserJob", ctx, jobData)
	ret0, _ := ret[0].(models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserJob indicates an expected call of CreateUserJob.
func (mr *MockUserRepoMockRecorder) CreateUserJob(ctx, jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserJob", reflect.TypeOf((*MockUserRepo)(nil).CreateUserJob), ctx, jobData)
}

// FetchAllJobs mocks base method.
func (m *MockUserRepo) FetchAllJobs(ctx context.Context) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllJobs", ctx)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllJobs indicates an expected call of FetchAllJobs.
func (mr *MockUserRepoMockRecorder) FetchAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllJobs", reflect.TypeOf((*MockUserRepo)(nil).FetchAllJobs), ctx)
}

// Jobbycid mocks base method.
func (m *MockUserRepo) Jobbycid(ctx context.Context, cid uint64) ([]models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobbycid", ctx, cid)
	ret0, _ := ret[0].([]models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobbycid indicates an expected call of Jobbycid.
func (mr *MockUserRepoMockRecorder) Jobbycid(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobbycid", reflect.TypeOf((*MockUserRepo)(nil).Jobbycid), ctx, cid)
}

// Jobbyjid mocks base method.
func (m *MockUserRepo) Jobbyjid(ctx context.Context, jid uint64) (models.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobbyjid", ctx, jid)
	ret0, _ := ret[0].(models.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobbyjid indicates an expected call of Jobbyjid.
func (mr *MockUserRepoMockRecorder) Jobbyjid(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobbyjid", reflect.TypeOf((*MockUserRepo)(nil).Jobbyjid), ctx, jid)
}

// Userbyemail mocks base method.
func (m *MockUserRepo) Userbyemail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Userbyemail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Userbyemail indicates an expected call of Userbyemail.
func (mr *MockUserRepoMockRecorder) Userbyemail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Userbyemail", reflect.TypeOf((*MockUserRepo)(nil).Userbyemail), ctx, email)
}
